<div class="card-block html-content"><p><strong>ES6 acquainted another route with arrange modules. It's not the same as CommonJS and AMD we are as of now utilizing, which through the new catchphrases import and export</strong></p> <p class="card-text"><p>ES6 acquainted another route with arrange modules. It’s not the same as <code>CommonJS</code> and <code>AMD</code> we are as of now utilizing, which through the new catchphrases <code>import</code> and <code>export</code>. It still <strong>NOT</strong> being bolstered by the most recent form of Node.js. Be that as it may, luckily we can influence <code>Babel.js</code> to play it at this moment.</p>
<p>When we are revamping the following form of Instant Message module of our creation - <a href="https://pro.worktile.com">Worktile Pro</a>, we utilized this element under Node.js v6 and <code>Babel.js</code>. So in this post I might want to present what it is and how I was utilizing.</p>
<h3>Development Environment with <code>Babel.js</code></h3>
<p><a href="https://babeljs.io/"><code>Bebel.js</code></a> is an open source JavaScript compiler which permits us to utilize most recent components, particularly something still in draft running in lower level runtime. For our situation, we require <code>Babel.js</code> to interpret and assemble our backend source code composed with ES6 and ES7 elements, to the code in ES6 that good with Node.js v6.</p>
<p>The following is a piece of the <code>package.json</code> document we are utilizing.</p>
<pre class="hljs" data-lang=""><code>{
      "name": "Worktile Pro IM",
      "version": "1.0.0",
      "main": "app.js",
      "scripts": {
        "run": "babel-node app.js",
        "build": "babel . -d .dist --ignore=\"node_modules\""
      },
      "devDependencies": {
        "babel-cli": "*",
        "babel-core": "*",
        "babel-preset-es2015-node5": "*",
        "babel-preset-stage-3": "*",
        "babel-register": "*"
      }
    }
</code></pre>
<p>Additionally we require <code>.babelrc</code> record to characterize the practices of <code>Babel.js</code> as underneath.</p>
<pre class="hljs" data-lang=""><code>    {
      "presets": ["es2015-node5", "stage-3"],
      "plugins": []
    }
</code></pre>
<p>You can duplicate this document and utilize <code>npm install</code> to set up your workplace. In the event that you need to run your code with <code>Babel.js</code> without assembling, you can straightforward use <code>npm run-script run</code>, then <code>babel-cli</code> will incorporate your source code and execute in memory. This is great when advancement yet not underway, since it will utilize a considerable measure memory and drawback the execution of your application. When you regard your code, you can run <code>npm run-script build</code> to give <code>Babel.js</code> a chance to assemble the source code to a yield organizer (For my situation it’s <code>./.dist/</code>) when you can <code>node ./.dist/app.js</code>.</p>
<p>For more data about <code>Babel.js</code>, <code>babel-node</code> and <code>Babel-cli</code> please allude to <a href="https://babeljs.io/docs/utilization/cli/">Babel’s document</a>.</p>
<h3>Customary CommomJS</h3>
<p>How about we make an exceptionally basic application with customary Node.js modules in <code>CommonJS</code> style. The following is <code>calc.js</code> record which will be utilized later.</p>
<pre class="hljs" data-lang=""><code>'use strict';

    exports.name = 'calc';
    exports.add = (x, y) =&gt; {
        return x + y;
    };
    exports.subtract = (x, y) =&gt; {
        return x - y;
    };
    exports.multiple = (x, y) =&gt; {
        return x * y;
    };
    exports.divide = (x, y) =&gt; {
        return x / y;
    };
</code></pre>
<p>The following is the way we can utilize it.</p>
<pre class="hljs" data-lang=""><code>  'use strict';

    const calc = require('./calc');

    const x = 3;
    const y = 5;

    console.log(`${calc.name}`);

    const result_add = calc.add(x, y);
    console.log(`${x} + ${y} = ${result_add}`);

    const result_subtract = calc.subtract(x, y);
    console.log(`${x} - ${y} = ${result_subtract}`);

    const result_multiple = calc.multiple(x, y);
    console.log(`${x} * ${y} = ${result_multiple}`);

    const result_divide = calc.divide(x, y);
    console.log(`${x} / ${y} = ${result_divide}`);
</code></pre>
<p>Since it’s in ES5 language structure we can essentially execute by <code>node app.js</code>.</p>
<p><img src="http://i.imgur.com/XrNrkP8.png" alt="enter image description here" title="enter image title here"></p>
<h3>Send out Variables and Import</h3>
<p>ES6 <code>export</code> works fundamentally the same as with the way we are utilizing already. Fundamentally we can utilize <code>export</code> watchword to any variables characterized in the module source code. For instance, we can send out <code>name</code> by utilizing <code>export const name = 'calc';</code>. So this module can be overhaul as underneath.</p>
<pre class="hljs" data-lang=""><code> 'use strict';

    export const name = 'calc';

    export const add = (x, y) =&gt; {
        return x + y;
    };

    export const subtract = (x, y) =&gt; {
        return x - y;
    };

    export const multiple = (x, y) =&gt; {
        return x * y;
    };

    export const divide = (x, y) =&gt; {
        return x / y;
    };
</code></pre>
<p>At the point when utilizing this module we require <code>import</code> watchword. Comparable as <code>require</code> we have to determine the way of this module and dole out as a variable. At that point we can utilize capacities characterized in <code>calc.js</code> not surprisingly.</p>
<pre class="hljs" data-lang=""><code>'use strict';

    import * as calc from './calc';

    const x = 3;
    const y = 5;

    console.log(`${calc.name}`);

    const result_add = calc.add(x, y);
    console.log(`${x} + ${y} = ${result_add}`);

    const result_subtract = calc.subtract(x, y);
    console.log(`${x} - ${y} = ${result_subtract}`);

    const result_multiple = calc.multiple(x, y);
    console.log(`${x} * ${y} = ${result_multiple}`);

    const result_divide = calc.divide(x, y);
    console.log(`${x} / ${y} = ${result_divide}`);
</code></pre>
<p>Since we are utilizing <code>export</code> and <code>import</code> watchwords which is <strong>NOT</strong> bolstered in Node.js v6, we will got mistake if simply run it by <code>node app.js</code>.</p>
<p><img src="https://i.imgur.com/ewkvFbr.png" alt="enter image description here" title="enter image title here"></p>
<p>We require use <code>Babel.js</code> to arrange it to the code Node.js backings and run it by utilizing <code>npm run-script run</code>, and you can see it works.</p>
<p><img src="https://i.imgur.com/5WpGHvx.png" alt="enter image description here" title="enter image title here"></p>
<p>In the code beneath, we utilize <code>import * as calc</code>, which implies it will import all variables this module sends out, as properties of <code>calc</code>. On the other hand we can simply import a few variables we need and utilize then as independent variables as beneath.</p>
<pre class="hljs" data-lang=""><code>'use strict';

    import {name, add, subtract} from './calc';

    const x = 3;
    const y = 5;

    console.log(`${name}`);

    const result_add = add(x, y);
    console.log(`${x} + ${y} = ${result_add}`);

    const result_subtract = subtract(x, y);
    console.log(`${x} - ${y} = ${result_subtract}`);
</code></pre>
<p><img src="https://i.imgur.com/Helnu3R.png" alt="enter image description here" title="enter image title here"></p>
<h3>Default Export</h3>
<p>Once in a while we have to send out only one variable. For this situation we utilize <code>export default</code>. For instance, in the code beneath I wrapped all variables into one protest and sent out as default.</p>
<pre class="hljs" data-lang=""><code>    'use strict';

    export default {
        name: 'calc',
        add: (x, y) =&gt; {
            return x + y;
        },
        subtract: (x, y) =&gt; {
            return x - y;
        },
        multiple: (x, y) =&gt; {
            return x * y;
        },
        divide: (x, y) =&gt; {
            return x / y;
        }
    };
</code></pre>
<p>Presently we can import it into a variable.</p>
<pre class="hljs" data-lang=""><code>    'use strict';

    import calc from './calc';

    const x = 3;
    const y = 5;

    console.log(`${calc.name}`);

    const result_add = calc.add(x, y);
    console.log(`${x} + ${y} = ${result_add}`);

    const result_subtract = calc.subtract(x, y);
    console.log(`${x} - ${y} = ${result_subtract}`);

    const result_multiple = calc.multiple(x, y);
    console.log(`${x} * ${y} = ${result_multiple}`);

    const result_divide = calc.divide(x, y);
    console.log(`${x} / ${y} = ${result_divide}`);
</code></pre>
<p><img src="https://i.imgur.com/mHo3MIa.png" alt="enter image description here" title="enter image title here"></p>
<p>Default fare is exceptionally valuable when sending out a class. For instance, the code beneath we characterized our <code>calc.js</code> as a class and fare. &gt;Note when trading a class, do <strong>NOT</strong> attach semi-comma toward the end of the code.</p>
<pre class="hljs" data-lang=""><code>
    'use strict';

    export default class Calc {
        constructor (x, y) {
            this.x = x;
            this.y = y;
        }

        add () {
            return this.x + this.y;
        }

        subtract () {
            return this.x - this.y;
        }

        multiple () {
            return this.x * this.y;
        }

        divide () {
            return this.x / this.y;
        }
    }
</code></pre>
<p>The following is the code we are utilizing this class.</p>
<pre class="hljs" data-lang=""><code>'use strict';

    import Calc from './calc';

    const x = 3;
    const y = 5;
    const calc = new Calc(x, y);

    const result_add = calc.add();
    console.log(`${x} + ${y} = ${result_add}`);

    const result_subtract = calc.subtract();
    console.log(`${x} - ${y} = ${result_subtract}`);

    const result_mutiple = calc.mutiple();
    console.log(`${x} * ${y} = ${result_mutiple}`);

    const result_divide = calc.divide();
    console.log(`${x} / ${y} = ${result_divide}`);
</code></pre>
<h3>Summary</h3>
<p>In this post I portrayed the <code>import</code> and <code>export</code> highlight in ES6 and how we are utilizing it as a part of Node.js v6 with <code>Babel.js</code>. Fundamentally it doesn’t furnish significant improvement contrasting and the first <code>CommonJS</code> module framework. In any case, with the update of Node.js and web programs, this component ought to be utilized broadly and supplant current <code>CommonJS</code> and <code>AMD</code> I think.</p>
<h3>Suggest</h3>
<p>☞ <a href="https://codek.tv/v/WxfufQVg8dU" rel="follow" title="Building Line Of Business Apps With Isomorphic React/Node" target="_blank">Building Line Of Business Apps With Isomorphic React/Node</a></p>
<p>☞ <a href="https://codek.tv/v/fFgLjwHcYdo" rel="follow" title="Node.js Tutorial with Visual Studio Code over 4 Hours" target="_blank">Node.js Tutorial with Visual Studio Code over 4 Hours</a></p>
<p>☞ <a href="https://codequs.com/a/ryeA19EO" rel="follow" title="Node.js Tutorials: The Web Developer Bootcamp" target="_blank">Node.js Tutorials: The Web Developer Bootcamp</a></p>
<p>☞ <a href="https://codequs.com/a/ByCmVjmu" rel="follow" title="Angular 2 and NodeJS - The Practical Guide to MEAN Stack 2.0" target="_blank">Angular 2 and NodeJS - The Practical Guide to MEAN Stack 2.0</a></p>
<p>☞ <a href="https://codequs.com/a/SyEf85O_" rel="follow" title="Complete Node JS Developer Course Building 5 Real World Apps" target="_blank">Complete Node JS Developer Course Building 5 Real World Apps</a></p>
</p></div>